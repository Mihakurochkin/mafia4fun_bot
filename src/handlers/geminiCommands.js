const { bot } = require('../config/bot');
const { getGeminiResponse, getGameResponse, generateBotMessage } = require('../utils/gemini');

function setupGeminiCommands() {
  bot.onText(/^\/ask (.+)$/, async (msg, match) => {
    const prompt = match[1];
    const response = await getGeminiResponse(prompt);
    
    if (response) {
      bot.sendMessage(msg.chat.id, response, {
        parse_mode: "HTML"
      });
    } else {
      const errorMessage = await generateBotMessage('error');
      bot.sendMessage(msg.chat.id, errorMessage || "üòî –í–∏–±–∞—á—Ç–µ, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
    }
  });

  bot.onText(/^\/fact$/, async (msg) => {
    const prompt = "–†–æ–∑–∫–∞–∂–∏ —Ü—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç –ø—Ä–æ —Ä–æ–∑—Ä–æ–±–∫—É —ñ–≥–æ—Ä";
    const response = await getGeminiResponse(prompt);
    
    if (response) {
      bot.sendMessage(msg.chat.id, response, {
        parse_mode: "HTML"
      });
    } else {
      const errorMessage = await generateBotMessage('error');
      bot.sendMessage(msg.chat.id, errorMessage || "üòî –í–∏–±–∞—á—Ç–µ, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–∞–∫—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
    }
  });

  bot.onText(/^\/game (.+)$/, async (msg, match) => {
    const prompt = match[1];
    const response = await getGameResponse(prompt);
    
    if (response) {
      bot.sendMessage(msg.chat.id, response, {
        parse_mode: "HTML"
      });
    } else {
      const errorMessage = await generateBotMessage('error');
      bot.sendMessage(msg.chat.id, errorMessage || "üòî –í–∏–±–∞—á—Ç–µ, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
    }
  });
}

module.exports = {
  setupGeminiCommands
}; 