const { bot, botInfo } = require('../config/bot');
const { players, timeout, isStarted, isNight, gameChatId, assignRoles } = require('../utils/gameState');
const { checkBotRights, getMissingRightsMessage } = require('../utils/rights');

function startGameRegistration(msg) {
  if (isStarted) {
    bot.sendMessage(msg.chat.id, "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤–∂–µ –ø–æ—á–∞–ª–∞—Å—å!");
    return;
  }

  timeout = 60;
  isStarted = true;
  gameChatId = msg.chat.id;

  checkBotRights(msg.chat.id).then(({ hasRights, missingRights }) => {
    if (hasRights) {
      let registrationMessage = null;
      let lastMessageText = "";

      const sendRegistrationMessage = () => {
        const messageText = `<b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–∞ –≥—Ä—É –ø–æ—á–∞–ª–∞—Å—å</b>\n\n` +
          `‚è± –ß–∞—Å –¥–æ –∫—ñ–Ω—Ü—è: ${timeout} —Å–µ–∫—É–Ω–¥\n` +
          `üë• –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≥—Ä–∞–≤—Ü—ñ (${players.length}):\n` +
          players.map((player, index) => {
            return `${index + 1}. <a href="tg://user?id=${player.id}">${player.name}</a>`;
          }).join('\n');

        if (messageText !== lastMessageText) {
          lastMessageText = messageText;
          
          if (!registrationMessage) {
            bot.sendMessage(msg.chat.id, messageText, {
              parse_mode: "HTML",
              disable_web_page_preview: true,
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: "–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è",
                      callback_data: "join_game",
                    },
                  ],
                ],
              },
            }).then(message => {
              registrationMessage = message;
              bot.pinChatMessage(msg.chat.id, message.message_id).catch(error => {
                console.error("Error pinning registration message:", error.message);
              });
            }).catch(error => {
              console.error("Error sending registration message:", error.message);
              isStarted = false;
            });
          } else {
            bot.editMessageText(messageText, {
              chat_id: msg.chat.id,
              message_id: registrationMessage.message_id,
              parse_mode: "HTML",
              disable_web_page_preview: true,
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: "–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è",
                      callback_data: "join_game",
                    },
                  ],
                ],
              },
            }).catch(error => {
              console.error("Error updating registration message:", error.message);
              isStarted = false;
            });
          }
        }
      };

      sendRegistrationMessage();

      const intervalId = setInterval(() => {
        if (timeout === -1) {
          clearInterval(intervalId);
          return;
        }
        
        if (timeout === 0) {
          if (players.length < 1) {
            const messageText = `<b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑—É–ø–∏–Ω–µ–Ω–æ</b>\n\n` +
              `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≥—Ä–∞–≤—Ü—ñ–≤ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏.\n` +
              `üë• –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ: ${players.length}/1\n\n` +
              `–°–ø—Ä–æ–±—É–π—Ç–µ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–Ω–æ–≤—É.`;

            bot.editMessageText(messageText, {
              chat_id: msg.chat.id,
              message_id: registrationMessage.message_id,
              parse_mode: "HTML",
            }).catch(error => {
              console.error("Error sending insufficient players message:", error.message);
            });

            isStarted = false;
            clearInterval(intervalId);
            return;
          }

          bot.sendMessage(msg.chat.id, 
            `‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n` +
            `üë• –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤: ${players.length}\n` +
            `üéÆ –ì—Ä–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è...`,
            { parse_mode: "HTML" }
          ).catch(error => {
            console.error("Error sending registration success message:", error.message);
          });

          const mafiaCount = Math.floor(players.length / 4);
          const messageText = `<b>–ì—Ä–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è!</b>\n\n` +
            `üë• –†–æ–∑–ø–æ–¥—ñ–ª —Ä–æ–ª–µ–π:\n` +
            `- –ú–∞—Ñ—ñ–æ–∑–∏: ${mafiaCount}\n` +
            `- –î–æ–∫—Ç–æ—Ä: 1\n` +
            `- –ö–æ–º—ñ—Å–∞—Ä: 1\n` +
            `- –ú–∏—Ä–Ω—ñ –∂–∏—Ç–µ–ª—ñ: ${players.length - mafiaCount - 2}\n\n` +
            `üåô –ù–∞—Å—Ç–∞–ª–∞ –Ω—ñ—á. –í—Å—ñ –∑–∞—Å–∏–Ω–∞—é—Ç—å...\n\n` +
            `üì± –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤–æ—ó —Ä–æ–ª—ñ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö.\n\n` +
            `üë• –ñ–∏–≤—ñ –≥—Ä–∞–≤—Ü—ñ (${players.length}):\n` +
            players.map((player, index) => {
              return `${index + 1}. <a href="tg://user?id=${player.id}">${player.name}</a>`;
            }).join('\n');

          bot.editMessageText(messageText, {
            chat_id: msg.chat.id,
            message_id: registrationMessage.message_id,
            parse_mode: "HTML",
          }).catch(error => {
            console.error("Error sending game start message:", error.message);
          });

          const playersWithRoles = assignRoles(players);
          playersWithRoles.forEach(player => {
            let roleMessage = '';
            switch(player.role) {
              case 'mafia':
                roleMessage = `üé≠ –í–∏ - –ú–∞—Ñ—ñ—è!\n\n` +
                  `–í–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è - —É—Å—É–≤–∞—Ç–∏ –º–∏—Ä–Ω–∏—Ö –∂–∏—Ç–µ–ª—ñ–≤ –ø–æ —á–µ—Ä–∑—ñ.\n` +
                  `–í–∏ –∑–Ω–∞—î—Ç–µ —ñ–Ω—à–∏—Ö –º–∞—Ñ—ñ–æ–∑—ñ–≤: ${playersWithRoles
                    .filter(p => p.role === 'mafia' && p.id !== player.id)
                    .map(p => p.name)
                    .join(', ')}`;
                break;
              case 'doctor':
                roleMessage = `üë®‚Äç‚öïÔ∏è –í–∏ - –õ—ñ–∫–∞—Ä!\n\n` +
                  `–í–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è - —Ä—è—Ç—É–≤–∞—Ç–∏ –≥—Ä–∞–≤—Ü—ñ–≤ –≤—ñ–¥ –º–∞—Ñ—ñ—ó.\n` +
                  `–ö–æ–∂–Ω—É –Ω—ñ—á –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ –æ–¥–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è –¥–ª—è –ø–æ—Ä—è—Ç—É–Ω–∫—É.`;
                break;
              case 'commissioner':
                roleMessage = `üëÆ –í–∏ - –ö–æ–º—ñ—Å–∞—Ä!\n\n` +
                  `–í–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è - –≤–∏–∫—Ä–∏–≤–∞—Ç–∏ –º–∞—Ñ—ñ—é.\n` +
                  `–ö–æ–∂–Ω—É –Ω—ñ—á –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ä–æ–ª—å –æ–¥–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è.`;
                break;
              case 'peaceful':
                roleMessage = `üë®‚Äçüåæ –í–∏ - –ú–∏—Ä–Ω–∏–π –∂–∏—Ç–µ–ª—å!\n\n` +
                  `–í–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è - –∑–Ω–∞–π—Ç–∏ —Ç–∞ —É—Å—É–Ω—É—Ç–∏ –º–∞—Ñ—ñ—é.\n` +
                  `–û–±–≥–æ–≤–æ—Ä—é–π—Ç–µ —Ç–∞ –≥–æ–ª–æ—Å—É–π—Ç–µ —Ä–∞–∑–æ–º –∑ —ñ–Ω—à–∏–º–∏ –≥—Ä–∞–≤—Ü—è–º–∏.`;
                break;
            }

            bot.sendMessage(
              player.id,
              roleMessage,
              { parse_mode: "HTML" }
            ).catch(error => {
              console.error(`Error sending role message to ${player.name}:`, error.message);
            });
          });

          isStarted = false;
          isNight = true;
          clearInterval(intervalId);
          return;
        }

        if (timeout % 5 === 0 || timeout <= 10) {
          sendRegistrationMessage();
        }
        timeout -= 1;
      }, 1000);

      bot.deleteMessage(msg.chat.id, msg.message_id).catch(error => {
        console.error("Error deleting command message:", error.message);
      });
    } else {
      bot.sendMessage(
        msg.chat.id,
        `–î–ª—è –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏ –º–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –Ω–∞—Å—Ç—É–ø–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:${getMissingRightsMessage(missingRights)}`
      );
      isStarted = false;
    }
  });
}

module.exports = {
  startGameRegistration
}; 