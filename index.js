require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });
const botUsername = "Mafia4FunBot";
const commands = [
  { command: "/start", description: "–ø–æ—á–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –Ω–∞ –≥—Ä—É" },
  { command: "/extend", description: "–ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –Ω–∞ 30 —Å–µ–∫—É–Ω–¥" },
  { command: "/stop", description: "–∑—É–ø–∏–Ω–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é" },
];
const players = [];
let allRights = false;
let timeout = 60;
let isStarted = false;

async function checkBotRights(chatId) {
  try {
    const chatMember = await bot.getChatMember(chatId, botUsername);
    if (chatMember.status === "administrator") {
      const missingRights = checkRights({
        can_delete_messages: chatMember.can_delete_messages,
        can_restrict_members: chatMember.can_restrict_members,
        can_pin_messages: chatMember.can_pin_messages
      });
      if (missingRights.length === 0) {
        allRights = true;
      } else {
        allRights = false;
      }
    } else {
      allRights = false;
    }
  } catch (error) {
    allRights = false;
  }
}

function startGameRegistration(msg) {
  timeout = 60;
  isStarted = true;

  if (allRights) {
    bot.sendMessage(msg.chat.id, `<b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–∞ –≥—Ä—É –ø–æ—á–∞–ª–∞—Å—å</b>`, {
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è",
              callback_data: "join_game",
            },
          ],
        ],
      },
    });

    const intervalId = setInterval(() => {
      switch (timeout) {
        case 30:
          bot.sendMessage(
            msg.chat.id,
            "–î–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∑–∞–ª–∏—à–∏–ª–æ—Å—å 30 —Å–µ–∫—É–Ω–¥"
          );
          break;
        case -1:
          clearInterval(intervalId);
          break;
        case 0:
          bot.sendMessage(msg.chat.id, "<b>–ì—Ä–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è!</b>", {
            parse_mode: "HTML",
          });
          isStarted = false;
          clearInterval(intervalId);
      }
      timeout -= 1;
    }, 1000);
    bot.deleteMessage(msg.chat.id, msg.message_id);
  } else {
    bot.sendMessage(
      msg.chat.id,
      `–°—Ö–æ–∂–µ —â–æ –º–µ–Ω—ñ –Ω–∞–¥–∞–Ω–æ –Ω–µ –≤—Å—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑ —Ü—å–æ–≥–æ —Å–ø–∏—Å–∫—É:
- –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
- –û–±–º–µ–∂–µ–Ω–Ω—è —ñ–Ω—à–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤
- –ó–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å`
    );
  }
}

function checkRights(newChatMember) {
  const rightsList = [
    [newChatMember.can_delete_messages, "- –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"],
    [newChatMember.can_restrict_members, "- –û–±–º–µ–∂–µ–Ω–Ω—è —ñ–Ω—à–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤"],
    [newChatMember.can_pin_messages, "- –ó–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"],
  ];
  const missingRights = [];

  rightsList.forEach((right) => {
    if (!right[0]) {
      missingRights.push(right[1]);
    }
  });

  return missingRights;
}

bot
  .setMyCommands(commands)
  .then(() => {
    return checkBotRights(process.env.GROUP_ID);
  })
  .catch((error) => {
    allRights = false;
  });

bot.on("new_chat_members", (msg) => {
  const newMembers = msg.new_chat_members;

  newMembers.forEach((member) => {
    if (member.username === bot.username || member.is_bot) {
      bot.sendMessage(
        msg.chat.id,
        `–ü—Ä–∏–≤—ñ—Ç!
–Ø –±–æ—Ç –¥–ª—è –≥—Ä–∏ –≤ –ú–∞—Ñ—ñ—é üé≠. –î–ª—è —Ä–æ–±–æ—Ç–∏ –º–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –Ω–∞—Å—Ç—É–ø–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
- –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
- –û–±–º–µ–∂–µ–Ω–Ω—è —ñ–Ω—à–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤
- –ó–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å`
      );
    }
  });
});

bot.on("my_chat_member", (msg) => {
  if (msg.new_chat_member.status !== "administrator") return;

  if (checkRights(msg.new_chat_member).length === 0) {
    bot.sendMessage(
      msg.chat.id,
      `–î—è–∫—É—é! –¢–µ–ø–µ—Ä —É –º–µ–Ω–µ —î –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≥—Ä–∏ –≤ –ú–∞—Ñ—ñ—é üïµÔ∏è‚Äç‚ôÇÔ∏è`
    );
    allRights = true;
  } else {
    bot.sendMessage(
      msg.chat.id,
      `–î—è–∫—É—é, —â–æ –∑—Ä–æ–±–∏–ª–∏ –º–µ–Ω–µ –∞–¥–º—ñ–Ω–æ–º!\n\n–ê–ª–µ –º–µ–Ω—ñ –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –∫—ñ–ª—å–∫–æ—Ö –≤–∞–∂–ª–∏–≤–∏—Ö –ø—Ä–∞–≤:\n${checkRights(
        msg.new_chat_member
      ).join("\n")}`
    );
    allRights = false;
  }
});

bot.onText(`/start@${botUsername}`, (msg) => {
  startGameRegistration(msg);
});

bot.onText("—Å—Ç–∞—Ä—Ç", (msg) => {
  startGameRegistration(msg);
});

bot.on("callback_query", (callbackQuery) => {
  const user = callbackQuery.from;

  if (callbackQuery.data === "join_game") {
    const username =
      `${user.first_name} ${user.last_name || ""}`.trim() || user.username;

    if (!players.find((player) => player.id === user.id)) {
      players.push({ id: user.id, name: username });
    }
  }
});

bot.onText(`/stop@${botUsername}`, (msg) => {
  if (isStarted) {
    timeout = -1;
    bot.sendMessage(msg.chat.id, "<b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –Ω–∞ –≥—Ä—É –∑—É–ø–∏–Ω–µ–Ω–æ</b>", {
      parse_mode: "HTML",
    });
    bot.deleteMessage(msg.chat.id, msg.message_id);
    isStarted = false;
  } else {
    bot.sendMessage(msg.chat.id, `–¶—é –∫–æ–º–∞–Ω–¥—É —î —Å–µ–Ω—Å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø—ñ—Å–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ /start@${botUsername}`);
  }
});

bot.onText(`/extend@${botUsername}`, (msg) => {
  timeout += 30;
  if (isStarted) {
    bot.sendMessage(
      msg.chat.id,
      `–î–æ —á–∞—Å—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –¥–æ–¥–∞–Ω–æ 30 —Å–µ–∫—É–Ω–¥. –î–æ –∫—ñ–Ω—Ü—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: ${
        timeout >= 60
          ? `${
              timeout % 60 >= 60
                ? `${Math.floor(timeout / 60)} —Ö–≤–∏–ª–∏–Ω–∏ ${timeout % 60} —Å–µ–∫—É–Ω–¥`
                : `1 —Ö–≤–∏–ª–∏–Ω–∞ ${timeout - 60} —Å–µ–∫—É–Ω–¥`
            }`
          : `${timeout} —Å–µ–∫—É–Ω–¥`
      }`
    );
  } else {
    bot.sendMessage(
      msg.chat.id,
      `–ü–µ—Ä—à –Ω—ñ–∂ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É, –ø–æ—á–Ω—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –Ω–∞ –≥—Ä—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏: /start@${botUsername}`
    );
  }
  bot.deleteMessage(msg.chat.id, msg.message_id);
});

bot.on("message", async (msg) => {
  if (msg.chat.type === "group" || msg.chat.type === "supergroup") {
    await checkBotRights(msg.chat.id);
  }
});
