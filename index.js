require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const { generateBotMessage } = require('./src/utils/gemini');
const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });
let botInfo = null;

bot.getMe().then(info => {
  botInfo = info;
  console.log(`Bot initialized with username: @${botInfo.username}`);
}).catch(error => {
  console.error('Error getting bot info:', error);
  process.exit(1);
});

const commands = [
  { command: "/start", description: "–ø–æ—á–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –Ω–∞ –≥—Ä—É" },
  { command: "/extend", description: "–ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –Ω–∞ 30 —Å–µ–∫—É–Ω–¥" },
  { command: "/stop", description: "–∑—É–ø–∏–Ω–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é" },
  { command: "/error", description: "–ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É" },
  { command: "/welcome", description: "–ø–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è" },
  { command: "/gamestart", description: "–ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –≥—Ä–∏" },
  { command: "/gameend", description: "–ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∫—ñ–Ω–µ—Ü—å –≥—Ä–∏" },
  { command: "/nightstart", description: "–ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –Ω–æ—á—ñ" },
  { command: "/daystart", description: "–ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –¥–Ω—è" },
  { command: "/role", description: "–ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–æ–ª—ñ" },
  { command: "/votestart", description: "–ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è" },
  { command: "/voteend", description: "–ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∫—ñ–Ω–µ—Ü—å –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è" },
  { command: "/death", description: "–ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–º–µ—Ä—Ç—å –≥—Ä–∞–≤—Ü—è" },
  { command: "/win", description: "–ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–µ—Ä–µ–º–æ–≥—É" },
  { command: "/action", description: "–ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –¥—ñ—é —Ä–æ–ª—ñ" },
  { command: "/heal", description: "–ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ª—ñ–∫—É–≤–∞–Ω–Ω—è" },
  { command: "/check", description: "–ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ä–æ–ª—ñ" }
];

bot.setMyCommands(commands).catch(error => {
  console.error('Error setting bot commands:', error);
});

const players = [];
const groupRights = new Map();
let timeout = 60;
let isStarted = false;
let isNight = false;
let gameChatId = null;
const warningCooldowns = new Map();

function assignRoles(players) {
  const roles = [];
  const mafiaCount = Math.floor(players.length / 4);
  
  for (let i = 0; i < mafiaCount; i++) {
    roles.push('mafia');
  }
  roles.push('doctor');
  roles.push('commissioner');
  while (roles.length < players.length) {
    roles.push('peaceful');
  }
  
  for (let i = roles.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [roles[i], roles[j]] = [roles[j], roles[i]];
  }
  
  return players.map((player, index) => ({
    ...player,
    role: roles[index]
  }));
}

async function checkBotRights(chatId) {
  if (!botInfo) {
    console.error('Bot info not initialized');
    return { hasRights: false, missingRights: ["–ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞"] };
  }

  try {
    const chatMember = await bot.getChatMember(chatId, botInfo.id);
    const hasAllRights = chatMember.status === "administrator" && 
                        chatMember.can_delete_messages && 
                        chatMember.can_restrict_members && 
                        chatMember.can_pin_messages;
    
    const missingRights = [];
    if (chatMember.status !== "administrator") {
      missingRights.push("–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä");
    } else {
      if (!chatMember.can_delete_messages) missingRights.push("–≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å");
      if (!chatMember.can_restrict_members) missingRights.push("–æ–±–º–µ–∂–µ–Ω–Ω—è —É—á–∞—Å–Ω–∏–∫—ñ–≤");
      if (!chatMember.can_pin_messages) missingRights.push("–∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å");
    }
    
    groupRights.set(chatId, {
      hasRights: hasAllRights,
      missingRights: missingRights
    });
    
    return { hasRights: hasAllRights, missingRights };
  } catch (error) {
    console.error(`Error checking rights for chat ${chatId}:`, error.message);
    groupRights.set(chatId, {
      hasRights: false,
      missingRights: ["–Ω–µ–≤—ñ–¥–æ–º—ñ –ø—Ä–∞–≤–∞ (–ø–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏)"]
    });
    return { hasRights: false, missingRights: ["–Ω–µ–≤—ñ–¥–æ–º—ñ –ø—Ä–∞–≤–∞ (–ø–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏)"] };
  }
}

function hasRights(chatId) {
  const rights = groupRights.get(chatId);
  return rights ? rights.hasRights : false;
}

function getMissingRightsMessage(missingRights) {
  if (!missingRights || missingRights.length === 0) return "";
  return `\n\n–í—ñ–¥—Å—É—Ç–Ω—ñ –ø—Ä–∞–≤–∞:\n${missingRights.map(right => `- ${right}`).join('\n')}`;
}

function startGameRegistration(msg) {
  if (isStarted) {
    bot.sendMessage(msg.chat.id, "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤–∂–µ –ø–æ—á–∞–ª–∞—Å—å!");
    return;
  }

  timeout = 60;
  isStarted = true;
  gameChatId = msg.chat.id;

  checkBotRights(msg.chat.id).then(async ({ hasRights, missingRights }) => {
    if (hasRights) {
      let registrationMessage = null;
      let lastMessageText = "";

      const sendRegistrationMessage = () => {
        const messageText = `<b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–∞ –≥—Ä—É –ø–æ—á–∞–ª–∞—Å—å</b>\n\n` +
          `‚è± –ß–∞—Å –¥–æ –∫—ñ–Ω—Ü—è: ${timeout} —Å–µ–∫—É–Ω–¥\n` +
          `üë• –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≥—Ä–∞–≤—Ü—ñ (${players.length}):\n` +
          players.map((player, index) => {
            return `${index + 1}. <a href="tg://user?id=${player.id}">${player.name}</a>`;
          }).join('\n');

        if (messageText !== lastMessageText) {
          lastMessageText = messageText;
          
          if (!registrationMessage) {
            bot.sendMessage(msg.chat.id, messageText, {
              parse_mode: "HTML",
              disable_web_page_preview: true,
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: "–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è",
                      callback_data: "join_game",
                    },
                  ],
                ],
              },
            }).then(message => {
              registrationMessage = message;
              bot.pinChatMessage(msg.chat.id, message.message_id).catch(error => {
                console.error("Error pinning registration message:", error.message);
              });
            }).catch(error => {
              console.error("Error sending registration message:", error.message);
              isStarted = false;
            });
          } else {
            bot.editMessageText(messageText, {
              chat_id: msg.chat.id,
              message_id: registrationMessage.message_id,
              parse_mode: "HTML",
              disable_web_page_preview: true,
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: "–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è",
                      callback_data: "join_game",
                    },
                  ],
                ],
              },
            }).catch(error => {
              console.error("Error updating registration message:", error.message);
              isStarted = false;
            });
          }
        }
      };

      sendRegistrationMessage();

      const intervalId = setInterval(async () => {
        if (timeout === -1) {
          clearInterval(intervalId);
          return;
        }
        
        if (timeout === 0) {
          if (players.length < 1) {
            const messageText = `<b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑—É–ø–∏–Ω–µ–Ω–æ</b>\n\n` +
              `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≥—Ä–∞–≤—Ü—ñ–≤ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏.\n` +
              `üë• –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ: ${players.length}/1\n\n` +
              `–°–ø—Ä–æ–±—É–π—Ç–µ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–Ω–æ–≤—É.`;

            bot.editMessageText(messageText, {
              chat_id: msg.chat.id,
              message_id: registrationMessage.message_id,
              parse_mode: "HTML",
            }).catch(error => {
              console.error("Error sending insufficient players message:", error.message);
            });

            isStarted = false;
            clearInterval(intervalId);
            return;
          }

          bot.sendMessage(msg.chat.id, 
            `‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n` +
            `üë• –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤: ${players.length}\n` +
            `üéÆ –ì—Ä–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è...`,
            { parse_mode: "HTML" }
          ).catch(error => {
            console.error("Error sending registration success message:", error.message);
          });

          const mafiaCount = Math.floor(players.length / 4);
          const messageText = `<b>–ì—Ä–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è!</b>\n\n` +
            `üë• –†–æ–∑–ø–æ–¥—ñ–ª —Ä–æ–ª–µ–π:\n` +
            `- –ú–∞—Ñ—ñ–æ–∑–∏: ${mafiaCount}\n` +
            `- –î–æ–∫—Ç–æ—Ä: 1\n` +
            `- –ö–æ–º—ñ—Å–∞—Ä: 1\n` +
            `- –ú–∏—Ä–Ω—ñ –∂–∏—Ç–µ–ª—ñ: ${players.length - mafiaCount - 2}\n\n` +
            `üåô –ù–∞—Å—Ç–∞–ª–∞ –Ω—ñ—á. –í—Å—ñ –∑–∞—Å–∏–Ω–∞—é—Ç—å...\n\n` +
            `üì± –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤–æ—ó —Ä–æ–ª—ñ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö.\n\n` +
            `üë• –ñ–∏–≤—ñ –≥—Ä–∞–≤—Ü—ñ (${players.length}):\n` +
            players.map((player, index) => {
              return `${index + 1}. <a href="tg://user?id=${player.id}">${player.name}</a>`;
            }).join('\n');

          bot.editMessageText(messageText, {
            chat_id: msg.chat.id,
            message_id: registrationMessage.message_id,
            parse_mode: "HTML",
          }).catch(error => {
            console.error("Error sending game start message:", error.message);
          });

          const playersWithRoles = assignRoles(players);
          const sendRoleMessages = async () => {
            for (const player of playersWithRoles) {
              let roleMessage = '';
              const otherMafia = playersWithRoles
                .filter(p => p.role === 'mafia' && p.id !== player.id)
                .map(p => p.name)
                .join(', ');

              switch(player.role) {
                case 'mafia':
                  roleMessage = await generateBotMessage('roleAssignment', {
                    role: 'mafia',
                    otherMafia
                  });
                  break;
                case 'doctor':
                  roleMessage = await generateBotMessage('roleAssignment', {
                    role: 'doctor'
                  });
                  break;
                case 'commissioner':
                  roleMessage = await generateBotMessage('roleAssignment', {
                    role: 'commissioner'
                  });
                  break;
                case 'peaceful':
                  roleMessage = await generateBotMessage('roleAssignment', {
                    role: 'peaceful'
                  });
                  break;
              }

              bot.sendMessage(
                player.id,
                roleMessage,
                { parse_mode: "HTML" }
              ).catch(error => {
                console.error(`Error sending role message to ${player.name}:`, error.message);
              });
            }
          };

          await sendRoleMessages();

          isStarted = false;
          isNight = true;
          clearInterval(intervalId);
          return;
        }

        if (timeout % 5 === 0 || timeout <= 10) {
          sendRegistrationMessage();
        }
        timeout -= 1;
      }, 1000);

      bot.deleteMessage(msg.chat.id, msg.message_id).catch(error => {
        console.error("Error deleting command message:", error.message);
      });
    } else {
      bot.sendMessage(
        msg.chat.id,
        `–î–ª—è –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏ –º–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –Ω–∞—Å—Ç—É–ø–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:${getMissingRightsMessage(missingRights)}`
      );
      isStarted = false;
    }
  });
}

bot.on("message", async (msg) => {
  if (isNight && msg.chat.id === gameChatId && !msg.from.is_bot) {
    const userId = msg.from.id;
    const lastWarning = warningCooldowns.get(userId) || 0;
    const now = Date.now();
    
    bot.deleteMessage(msg.chat.id, msg.message_id).catch(error => {
      console.error("Error deleting night message:", error.message);
    });
    
    if (now - lastWarning > 30000) {
      bot.sendMessage(
        msg.chat.id,
        "‚ö†Ô∏è –ü—ñ–¥ —á–∞—Å –Ω–æ—á—ñ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç!",
        { reply_to_message_id: msg.message_id }
      ).catch(error => {
        console.error("Error sending night warning:", error.message);
      });
      
      warningCooldowns.set(userId, now);
    }
  }
});

bot.on("new_chat_members", async (msg) => {
  if (!botInfo) {
    console.error('Bot info not initialized');
    return;
  }

  const newMembers = msg.new_chat_members;

  for (const member of newMembers) {
    if (member.id === botInfo.id || member.is_bot) {
      const { missingRights } = await checkBotRights(msg.chat.id);
      bot.sendMessage(
        msg.chat.id,
        `–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥—Ä–∏ –≤ –ú–∞—Ñ—ñ—é üé≠.${getMissingRightsMessage(missingRights)}`
      );
    }
  }
});

bot.on("my_chat_member", async (msg) => {
  if (!botInfo) {
    console.error('Bot info not initialized');
    return;
  }

  const { hasRights, missingRights } = await checkBotRights(msg.chat.id);
  if (hasRights) {
    bot.sendMessage(
      msg.chat.id,
      `–î—è–∫—É—é! –¢–µ–ø–µ—Ä —É –º–µ–Ω–µ —î –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≥—Ä–∏ –≤ –ú–∞—Ñ—ñ—é üïµÔ∏è‚Äç‚ôÇÔ∏è`
    );
  } else {
    bot.sendMessage(
      msg.chat.id,
      `–î—è–∫—É—é, —â–æ –∑—Ä–æ–±–∏–ª–∏ –º–µ–Ω–µ –∞–¥–º—ñ–Ω–æ–º!${getMissingRightsMessage(missingRights)}`
    );
  }
});

bot.onText(/^\/start(@\w+)?$/, (msg, match) => {
  if (!botInfo) {
    console.error('Bot info not initialized');
    return;
  }
  
  if (!match[1] || match[1] === `@${botInfo.username}`) {
    startGameRegistration(msg);
  }
});

bot.onText(/^—Å—Ç–∞—Ä—Ç$/, (msg) => {
  startGameRegistration(msg);
});

bot.onText(/^\/stop(@\w+)?$/, (msg, match) => {
  if (!botInfo) {
    console.error('Bot info not initialized');
    return;
  }

  if (!match[1] || match[1] === `@${botInfo.username}`) {
    if (isStarted) {
      timeout = -1;
      bot.sendMessage(msg.chat.id, "<b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –Ω–∞ –≥—Ä—É –∑—É–ø–∏–Ω–µ–Ω–æ</b>", {
        parse_mode: "HTML",
      }).catch(error => {
        console.error("Error sending stop message:", error.message);
      });
      bot.deleteMessage(msg.chat.id, msg.message_id).catch(error => {
        console.error("Error deleting stop command:", error.message);
      });
      isStarted = false;
    } else {
      bot.sendMessage(msg.chat.id, `–¶—é –∫–æ–º–∞–Ω–¥—É —î —Å–µ–Ω—Å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø—ñ—Å–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ /start@${botInfo.username}`);
    }
  }
});

bot.onText(/^\/extend(@\w+)?$/, (msg, match) => {
  if (!botInfo) {
    console.error('Bot info not initialized');
    return;
  }

  if (!match[1] || match[1] === `@${botInfo.username}`) {
    if (!isStarted) {
      bot.sendMessage(
        msg.chat.id,
        `–ü–µ—Ä—à –Ω—ñ–∂ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É, –ø–æ—á–Ω—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –Ω–∞ –≥—Ä—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏: /start@${botInfo.username}`
      );
      return;
    }

    timeout += 30;
    bot.sendMessage(
      msg.chat.id,
      `–î–æ —á–∞—Å—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –¥–æ–¥–∞–Ω–æ 30 —Å–µ–∫—É–Ω–¥. –î–æ –∫—ñ–Ω—Ü—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: ${
        timeout >= 60
          ? `${
              timeout % 60 >= 60
                ? `${Math.floor(timeout / 60)} —Ö–≤–∏–ª–∏–Ω–∏ ${timeout % 60} —Å–µ–∫—É–Ω–¥`
                : `1 —Ö–≤–∏–ª–∏–Ω–∞ ${timeout - 60} —Å–µ–∫—É–Ω–¥`
            }`
          : `${timeout} —Å–µ–∫—É–Ω–¥`
      }`
    ).catch(error => {
      console.error("Error sending extend message:", error.message);
    });
    
    bot.deleteMessage(msg.chat.id, msg.message_id).catch(error => {
      console.error("Error deleting extend command:", error.message);
    });
  }
});

bot.on("callback_query", (callbackQuery) => {
  const user = callbackQuery.from;

  if (callbackQuery.data === "join_game") {
    const username = user.username || "";
    const fullName = `${user.first_name} ${user.last_name || ""}`.trim() || user.username;

    if (!players.find((player) => player.id === user.id)) {
      players.push({ 
        id: user.id, 
        name: fullName,
        username: username
      });
      bot.answerCallbackQuery(callbackQuery.id).catch(error => {
        console.error("Error answering callback query:", error.message);
      });
    }
  }
});

bot.onText(/^\/error(@\w+)?$/, async (msg, match) => {
  if (!botInfo || (match[1] && match[1] !== `@${botInfo.username}`)) return;
  const message = await generateBotMessage('error', { type: 'registration_already_started' });
  bot.sendMessage(msg.chat.id, message);
});

bot.onText(/^\/welcome(@\w+)?$/, async (msg, match) => {
  if (!botInfo || (match[1] && match[1] !== `@${botInfo.username}`)) return;
  const message = await generateBotMessage('welcome');
  bot.sendMessage(msg.chat.id, message);
});

bot.onText(/^\/gamestart(@\w+)?$/, async (msg, match) => {
  if (!botInfo || (match[1] && match[1] !== `@${botInfo.username}`)) return;
  const message = await generateBotMessage('gameStart', { timeout: 30 });
  bot.sendMessage(msg.chat.id, message);
});

bot.onText(/^\/gameend(@\w+)?$/, async (msg, match) => {
  if (!botInfo || (match[1] && match[1] !== `@${botInfo.username}`)) return;
  const message = await generateBotMessage('gameEnd');
  bot.sendMessage(msg.chat.id, message);
});

bot.onText(/^\/nightstart(@\w+)?$/, async (msg, match) => {
  if (!botInfo || (match[1] && match[1] !== `@${botInfo.username}`)) return;
  const message = await generateBotMessage('nightStart');
  bot.sendMessage(msg.chat.id, message);
});

bot.onText(/^\/daystart(@\w+)?$/, async (msg, match) => {
  if (!botInfo || (match[1] && match[1] !== `@${botInfo.username}`)) return;
  const message = await generateBotMessage('dayStart');
  bot.sendMessage(msg.chat.id, message);
});

bot.onText(/^\/role(@\w+)?$/, async (msg, match) => {
  if (!botInfo || (match[1] && match[1] !== `@${botInfo.username}`)) return;
  const message = await generateBotMessage('roleAssignment', { role: 'mafia', otherMafia: 'Player1, Player2' });
  bot.sendMessage(msg.chat.id, message);
});

bot.onText(/^\/votestart(@\w+)?$/, async (msg, match) => {
  if (!botInfo || (match[1] && match[1] !== `@${botInfo.username}`)) return;
  const message = await generateBotMessage('voteStart');
  bot.sendMessage(msg.chat.id, message);
});

bot.onText(/^\/voteend(@\w+)?$/, async (msg, match) => {
  if (!botInfo || (match[1] && match[1] !== `@${botInfo.username}`)) return;
  const message = await generateBotMessage('voteEnd');
  bot.sendMessage(msg.chat.id, message);
});

bot.onText(/^\/death(@\w+)?$/, async (msg, match) => {
  if (!botInfo || (match[1] && match[1] !== `@${botInfo.username}`)) return;
  const message = await generateBotMessage('playerDeath');
  bot.sendMessage(msg.chat.id, message);
});

bot.onText(/^\/win(@\w+)?$/, async (msg, match) => {
  if (!botInfo || (match[1] && match[1] !== `@${botInfo.username}`)) return;
  const message = await generateBotMessage('gameWin');
  bot.sendMessage(msg.chat.id, message);
});

bot.onText(/^\/action(@\w+)?$/, async (msg, match) => {
  if (!botInfo || (match[1] && match[1] !== `@${botInfo.username}`)) return;
  const message = await generateBotMessage('roleAction', { role: 'mafia' });
  bot.sendMessage(msg.chat.id, message);
});

bot.onText(/^\/heal(@\w+)?$/, async (msg, match) => {
  if (!botInfo || (match[1] && match[1] !== `@${botInfo.username}`)) return;
  const message = await generateBotMessage('doctorHeal', { playerName: 'Player1' });
  bot.sendMessage(msg.chat.id, message);
});

bot.onText(/^\/check(@\w+)?$/, async (msg, match) => {
  if (!botInfo || (match[1] && match[1] !== `@${botInfo.username}`)) return;
  const message = await generateBotMessage('commissionerCheck', { playerName: 'Player1', isMafia: true });
  bot.sendMessage(msg.chat.id, message);
});